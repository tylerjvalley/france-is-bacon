{"version":3,"sources":["Store/Reducers/search.js","Store/store.js","Store/Actions/types.js","Store/Actions/fetchSubs.js","Components/Search/Search.js","Containers/Main/Main.js","Components/Subreddits/Subreddits.js","Containers/Header/Header.js","Store/Actions/search.js","Containers/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["initialState","searched","subreddits","rootReducer","combineReducers","src","state","arguments","length","undefined","action","type","Object","objectSpread","val","some","subreddit","toUpperCase","alert","concat","toConsumableArray","dis","displayReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","apiUrl","checkSubreddit","sub","axios","get","then","res","catch","error","console","log","fetchSubPosts","data","children","fetchPostComments","SearchField","handleSubmit","e","preventDefault","_this2","this","react_default","a","createElement","onSubmit","className","Search","onSearchChange","props","search","target","value","Button","onClick","clicked","Component","main","preview_image","post_preview","Image","subreddit_title","react_router_dom","to","pathname","postTitle","post_title","image","text","post_text","author","comments","Icon","name","score","num_comments","Subreddits","subImage","icon_img","setState","Grid","Column","width","label","as","color","content","ribbon","Header","posts","isValid","handleClick","_this","handleSubClick","subs","map","Components_Subreddits_Subreddits","key","post","Main","id","subreddit_name_prefixed","title","thumbnail","selftext","toString","Fragment","Search_Search","onSearch","centered","Row","connect","dispatch","Post","_this$props$location$","location","App","react_router","path","exact","component","render","Containers_Post_Post","assign","isAuthed","Boolean","hostname","match","ReactDOM","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0de9dca5.chunk.js","sourcesContent":["import * as actions from '../Actions/types';\n\nconst initialState = {\n    //all searched subreddits will be displayed below the search\n    searched: '',\n    subreddits: [],\n}\n\nexport const reducer = (state = initialState, action) => {\n    if (action.type) {\n        switch (action.type) {\n            case actions.SEARCH_SUBREDDIT:\n                \n                return {\n                    ...state,\n                    searched: action.val\n                }\n            \n            case actions.SUBMIT_SUBREDDIT: \n                const foundExistingSubreddit = state.subreddits.some(\n                    subreddit => subreddit.toUpperCase() === action.val.toUpperCase()\n                )\n\n                if (!foundExistingSubreddit) {\n                    return {\n                        ...state,\n                        subreddits: [...state.subreddits, action.val]\n                    }\n                } else {\n                    alert('Subreddit already chosen')\n                    return state\n                }\n                \n                \n                \n                \n              \n                    \n                \n            default:\n                return state;\n        }\n    }\n}\n\n\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport displayReducer from './Reducers/display';\nimport { reducer } from './Reducers/search';\n\nconst rootReducer = combineReducers({\n    src: reducer,\n    dis: displayReducer\n})\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n\nexport default store;","export const SEARCH_SUBREDDIT = 'SEARCH_SUBREDDIT';\nexport const SUBMIT_SUBREDDIT = 'SUBMIT_SUBREDDIT';\nexport const FETCH_SUBS_BEGIN = 'FETCH_SUBS_BEGIN';\nexport const FETCH_SUBS_SUCCESS = 'FETCH_SUBS_SUCCESS';\nexport const FETCH_SUBS_FAILURE = 'FETCH_SUBS_FAILURE';\nexport const DISPLAY_POSTS = 'DISPLAY_POSTS';","import axios from 'axios';\n\nconst apiUrl = 'https://www.reddit.com/';\n\n\n\n//check if subreddit exists \n\nexport const checkSubreddit = (sub) => {\n\n    return axios.get(apiUrl + 'r/' + sub + '/about.json')\n        .then(res => {\n            return true\n        })\n        .catch(error => {\n            console.log('Invalid Subreddit')\n            return false\n            \n        })\n}\n//fetch subreddit icon images\nexport const fetchSubImages = (sub) => {\n    \n     return axios.get(apiUrl + 'r/' + sub + '/about.json')\n        .then(res => {\n            return res.data.data.icon_img\n        })\n        .catch(error => {\n            console.log(error);\n        })\n        \n\n}\n\n//fetch posts...\n\nexport const fetchSubPosts = (sub) => {\n    return axios.get(apiUrl + 'r/' + sub + '/top.json')\n        .then(res => {\n             return res.data.data.children //top 25 posts\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n\n//fetch post comments...\n\nexport const fetchPostComments = () => {\n    return axios.get(apiUrl + 'r/funny/comments/c87acm.json')\n        .then(res => {\n            console.log(res.data[1].data.children)\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n","import React, { Component } from 'react';\nimport { Search, Button } from 'semantic-ui-react';\n\n\nclass SearchField extends Component {\n\n\n    state = {}\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n   render() {\n\n   \n    return (\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n            <div className=\"search-area\">\n                <Search\n                    onSearchChange={(e) => this.props.search(e.target.value)} />\n                <Button onClick={this.props.clicked}>Add Subreddit</Button>\n            </div>\n        </form>\n    );\n   }\n }\n\n\n\n\nexport default SearchField;\n\n","import React from 'react';\nimport { Icon, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\n\n\nconst main = (props) => {\n\n    let preview_image;\n\n    if (props.post_preview !== 'self') {\n        preview_image = (<Image src={props.post_preview} />)\n    } \n\n    return (\n        <div className=\"main-content\">\n\n            <div className=\"sub-title\">\n                <h4>{props.subreddit_title}</h4>\n            </div>\n\n            <div className=\"posts\">\n\n                <div className=\"post\">\n\n                    <h4 className=\"post-title\">\n                        <Link to={{\n                            pathname: '/post/',\n                            state: {\n                                postTitle: props.post_title,\n                                image: props.post_preview,\n                                text: props.post_text,\n                                author: props.author,\n                                comments: props.comments\n                            }\n                        }}>{props.post_title}</Link>\n                    </h4>\n                    \n                    {preview_image}\n                </div>\n                <div className=\"post-info\">\n                    <Icon name=\"arrow alternate circle up outline\" />{props.score}<Icon name=\"arrow alternate circle down outline\" /> {props.num_comments} <Icon name=\"comment outline\" /> <br/>\n                    by {props.author} | 12 hours ago\n                </div>\n\n            </div>\n\n        </div>\n    )\n};\n\n\nexport default main;","import React, { Component } from 'react';\nimport { Grid, Image } from 'semantic-ui-react';\nimport { fetchSubImages } from '../../Store/Actions/fetchSubs';\n\n\n\n\n\n\nclass Subreddits extends Component {\n\n    state = {\n        subImage: '',\n    }\n\n    componentDidMount() {\n        fetchSubImages(this.props.sub).then(image => {\n\n            if (image) {\n                this.setState({ subImage: image })\n            } else {\n                const redditImage = 'https://cdns.iconmonstr.com/wp-content/assets/preview/2016/240/iconmonstr-reddit-4.png';\n                this.setState({ subImage: redditImage})\n            }\n          \n                \n\n           \n        })\n    }\n   \n    \n    render() {\n             \n        return (\n         \n            \n        <Grid.Column onClick={this.props.clicked}width={2}>\n            <Image\n                label={{ as: 'a', color: 'blue', content: `${this.props.sub}`, ribbon: true }}\n                src={this.state.subImage}\n\n            />\n        </Grid.Column>\n                \n        );\n    }\n}\n\n\nexport default Subreddits;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Store/Actions';\nimport { Grid } from 'semantic-ui-react';\nimport SearchField from '../../Components/Search/Search';\nimport Main from '../Main/Main';\nimport Subreddits from '../../Components/Subreddits/Subreddits';\nimport { fetchSubPosts, checkSubreddit, fetchPostComments } from '../../Store/Actions/fetchSubs';\n\nclass Header extends Component {\n\n    state = {\n        posts: [],\n        isValid: true,\n    }\n\n    \n    \n    handleClick = (props) => {\n\n        checkSubreddit(props).then(res => {\n            if (res === true) {\n                this.setState({isValid: true}, () => {\n                    this.props.onSubmit(props)\n                })\n            } else {\n                this.setState({isValid: false}, () => {\n                    alert('Invalid Subreddit')\n                })\n            }\n\n        })\n        \n        \n    }\n\n    handleSubClick = (props) => {\n        fetchSubPosts(props).then(posts => {\n            this.setState({posts: posts});\n            \n        });\n\n        fetchPostComments()\n        \n    }\n\n    render () {\n       \n        let subreddits;\n\n        subreddits = this.props.subs.map(sub => {\n\n            return (\n\n                <Subreddits\n                    clicked={() => this.handleSubClick(sub)}\n                    key={sub}\n                    sub={sub}\n                />\n            )\n\n\n        })\n\n\n         const main = this.state.posts.map(post => {     \n            return (\n                <Main\n                    key={post.data.id}\n                    subreddit_title={post.data.subreddit_name_prefixed}\n                    post_title={post.data.title}\n                    post_preview={post.data.thumbnail}\n                    post_text={post.data.selftext}\n                    num_comments={post.data.num_comments.toString()}\n                    score={post.data.score.toString()}\n                    author={post.data.author}\n                //Get time created and create a function that tells the user how long ago it was created\n                />    \n            )\n        })\n       \n\n\n        return (\n            <>\n\n            <div className=\"header\">\n                <h1 className=\"title\">France Is Bacon</h1>\n                <SearchField \n                    search={this.props.onSearch}\n                    clicked={() => this.handleClick(this.props.src)} /> \n            </div>\n                <Grid className=\"subreddit-selection\" centered>\n                    <Grid.Row>\n                        {subreddits}\n                    </Grid.Row>\n                </Grid>\n\n                {main}\n           </>\n          \n        ); \n    }\n\n}\n\n\nconst mapStateToProps = state => {\n\n    return {\n        src: state.src.searched,\n        subs: state.src.subreddits,\n        \n        \n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearch: (e) => dispatch(actions.search(e)),\n        onSubmit: (value) => dispatch(actions.submit(value)),\n        \n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import * as types from './types';\n\n\n\nexport const search = (val) => {\n    return {\n        type: types.SEARCH_SUBREDDIT,\n        val: val\n    }\n}\n\nexport const submit = (val) => {\n   \n    return {\n        type: types.SUBMIT_SUBREDDIT,\n        val: val\n    }\n   \n    \n}\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react'\n\n\nclass Post extends Component {\n    state = {\n        postTitle: '',\n        image: '',\n        text: '',\n        comments: [],\n        author: '',\n    }\n\n    componentDidMount() {\n        //const { header } = this.props.match.params\n        const { postTitle, image, text, comments, author } = this.props.location.state\n        this.setState({\n            postTitle: postTitle,\n            image: image,\n            text: text,\n            comments: comments,\n            author: author\n        })\n        \n    }\n\n    render() {\n        return(\n            <div className=\"single-post\">\n                <Link to=\"/\"><Button>Go Back</Button></Link>\n                <div className=\"single-post-header\">\n                    <h1>{this.state.postTitle}</h1>\n                    <Image src={this.state.image} />\n                    <p>{this.state.text}</p>\n                    <p>comment icons... upvote/downvote icons and score by {this.state.author}</p>\n                </div>\n                <div className=\"comments\">\n                    <p>username...comment score....time</p>\n                    <h4>user comment</h4>\n                </div>\n\n               \n            </div>\n        );\n    }\n}\n\n\nexport default Post;","import React, { Component } from 'react';\nimport Header from './Containers/Header/Header';\nimport { BrowserRouter as Router, Route }  from 'react-router-dom'\nimport Post from './Containers/Post/Post';\nimport './App.css';\n\n\nclass App extends Component {\n\n  render () {\n    \n  return (\n\n      <div className=\"App\">\n       <Router>\n          <Route path=\"/\" exact component={Header} />\n          <Route \n            path=\"/post/\" \n            render={(props) => <Post {...props} isAuthed={true}/>} />\n          <footer></footer>\n        </Router>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from '../src/Store/store';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}