{"version":3,"sources":["Store/Reducers/search.js","Store/store.js","Store/Actions/types.js","Store/Actions/fetchSubs.js","Components/Search/Search.js","Containers/Main/Main.js","Components/Subreddits/Subreddits.js","Containers/Header/Header.js","Store/Actions/search.js","App.js","serviceWorker.js","index.js"],"names":["initialState","searched","subreddits","rootReducer","combineReducers","src","state","arguments","length","undefined","action","type","Object","objectSpread","val","concat","dis","displayReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","apiUrl","fetchSubPosts","sub","axios","get","then","res","data","children","catch","error","console","log","SearchField","handleSubmit","e","preventDefault","_this2","this","react_default","a","createElement","onSubmit","className","Search","onSearchChange","props","search","target","value","Button","onClick","clicked","Component","main","subreddit_title","post_title","Image","post_preview","Icon","name","score","num_comments","author","Subreddits","subImage","icon_img","image","setState","Grid","Column","width","label","as","color","content","ribbon","Header","posts","handleClick","_this","handleSubClick","subs","map","Components_Subreddits_Subreddits","key","post","Main","id","subreddit_name_prefixed","title","thumbnail","toString","Fragment","Search_Search","onSearch","centered","Row","connect","dispatch","App","Containers_Header_Header","Boolean","location","hostname","match","ReactDOM","render","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9427d3a.chunk.js","sourcesContent":["import * as actions from '../Actions/types';\n//import { fetchSubImages } from '../Actions/fetchSubs';\n\n\nconst initialState = {\n    //all searched subreddits will be displayed below the search\n    searched: '',\n    subreddits: [],\n}\n\nexport const reducer = (state = initialState, action) => {\n    if (action.type) {\n        switch (action.type) {\n            case actions.SEARCH_SUBREDDIT:\n                return {\n                    ...state,\n                    searched: action.val\n                }\n            \n            case actions.SUBMIT_SUBREDDIT: \n        \n                return {\n                    ...state,\n                    subreddits: state.subreddits.concat(action.val),\n                }\n                \n            default:\n                return state;\n        }\n    }\n}\n\n\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport displayReducer from './Reducers/display';\nimport { reducer } from './Reducers/search';\n\nconst rootReducer = combineReducers({\n    src: reducer,\n    dis: displayReducer\n})\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n\nexport default store;","export const SEARCH_SUBREDDIT = 'SEARCH_SUBREDDIT';\nexport const SUBMIT_SUBREDDIT = 'SUBMIT_SUBREDDIT';\nexport const FETCH_SUBS_BEGIN = 'FETCH_SUBS_BEGIN';\nexport const FETCH_SUBS_SUCCESS = 'FETCH_SUBS_SUCCESS';\nexport const FETCH_SUBS_FAILURE = 'FETCH_SUBS_FAILURE';\nexport const DISPLAY_POSTS = 'DISPLAY_POSTS';","import axios from 'axios';\n\nconst apiUrl = 'https://www.reddit.com/';\n//fetch subreddit icon images\nexport const fetchSubImages = (sub) => {\n    \n     return axios.get(apiUrl + 'r/' + sub + '/about.json')\n        .then(res => {\n            return res.data.data.icon_img\n        })\n        .catch(error => {\n            console.log(error);\n        })\n        \n\n}\n\n//fetch posts...\n\nexport const fetchSubPosts = (sub) => {\n    return axios.get(apiUrl + 'r/' + sub + '/top.json')\n        .then(res => {\n             return res.data.data.children //top 25 posts\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n\n//maybe more stuff later\n\n","import React, { Component } from 'react';\nimport { Search, Button } from 'semantic-ui-react';\n\n\nclass SearchField extends Component {\n\n\n    state = {}\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n   render() {\n\n   \n    return (\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n            <div className=\"search-area\">\n                <Search\n                    onSearchChange={(e) => this.props.search(e.target.value)} />\n                <Button onClick={this.props.clicked}>Add Subreddit</Button>\n            </div>\n        </form>\n    );\n   }\n }\n\n\n\n\nexport default SearchField;\n\n","import React from 'react';\nimport { Icon, Image } from 'semantic-ui-react'\n\n\nconst main = (props) => (\n\n\n    <div className=\"main-content\">\n\n        <div className=\"sub-title\">\n            <h4>{props.subreddit_title}</h4>\n        </div>\n\n        <div className=\"posts\">\n\n            <div className=\"post\">\n\n                <h4 className=\"post-title\">\n                    {props.post_title}\n                </h4>\n\n                <Image src={props.post_preview} />\n            </div>\n            <div className=\"post-info\">\n                <Icon name=\"arrow alternate circle up outline\" /> {props.score} <Icon name=\"arrow alternate circle down outline\" /> {props.num_comments} <Icon name=\"comment outline\" /> <br/>\n                by {props.author} | 12 hours ago\n            </div>\n\n        </div>\n\n    </div>\n\n);\n\n\nexport default main;","import React, { Component } from 'react';\nimport { Grid, Image } from 'semantic-ui-react';\nimport { fetchSubImages } from '../../Store/Actions/fetchSubs';\n\n\n\n\n\n\nclass Subreddits extends Component {\n\n    state = {\n        subImage: '',\n    }\n\n    componentDidMount() {\n        fetchSubImages(this.props.sub).then(image => {\n\n            if (image) {\n                this.setState({ subImage: image })\n            } else {\n                const redditImage = 'https://cdns.iconmonstr.com/wp-content/assets/preview/2016/240/iconmonstr-reddit-4.png';\n                this.setState({ subImage: redditImage})\n            }\n          \n                \n\n           \n        })\n    }\n   \n    \n    render() {\n             \n        return (\n         \n            \n        <Grid.Column onClick={this.props.clicked}width={2}>\n            <Image\n                label={{ as: 'a', color: 'blue', content: `${this.props.sub}`, ribbon: true }}\n                src={this.state.subImage}\n\n            />\n        </Grid.Column>\n                \n        );\n    }\n}\n\n\nexport default Subreddits;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Store/Actions';\nimport { Grid } from 'semantic-ui-react';\nimport SearchField from '../../Components/Search/Search';\nimport Main from '../Main/Main';\nimport Subreddits from '../../Components/Subreddits/Subreddits';\nimport { fetchSubPosts } from '../../Store/Actions/fetchSubs';\n\nclass Header extends Component {\n\n    state = {\n        posts: []\n    }\n\n\n    handleClick = (props) => {\n        this.props.onSubmit(props)\n        \n    }\n\n    handleSubClick = (props) => {\n        console.log(props)\n        fetchSubPosts(props).then(posts => {\n            this.setState({posts: posts});\n            console.log(this.state.posts[0].data)\n           \n        })\n        \n    }\n\n    render () {\n       \n        let subreddits;\n\n        subreddits = this.props.subs.map(sub => {\n\n            return (\n\n                <Subreddits\n                    clicked={() => this.handleSubClick(sub)}\n                    key={sub}\n                    sub={sub}\n                />\n            )\n\n\n        })\n\n\n         const main = this.state.posts.map(post => {      \n            return (\n                <Main\n                    key={post.data.id}\n                    subreddit_title={post.data.subreddit_name_prefixed}\n                    post_title={post.data.title}\n                    post_preview={post.data.thumbnail}\n                    num_comments={post.data.num_comments.toString()}\n                    score={post.data.score.toString()}\n                    author={post.data.author}\n                //Get time created and create a function that tells the user how long ago it was created\n                />    \n            )\n        })\n       \n\n\n        return (\n            <>\n\n            <div className=\"header\">\n                <h1 className=\"title\">France Is Bacon</h1>\n                <SearchField \n                    search={this.props.onSearch}\n                    clicked={() => this.handleClick(this.props.src)} /> \n            </div>\n                <Grid className=\"subreddit-selection\" centered>\n                    <Grid.Row>\n                        {subreddits}\n                    </Grid.Row>\n                </Grid>\n\n                {main}\n           </>\n          \n        ); \n    }\n\n}\n\n\nconst mapStateToProps = state => {\n\n    return {\n        src: state.src.searched,\n        subs: state.src.subreddits,\n        \n        \n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearch: (e) => dispatch(actions.search(e)),\n        onSubmit: (value) => dispatch(actions.submit(value)),\n        \n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import * as types from './types';\n\n\nexport const search = (val) => {\n    return {\n        type: types.SEARCH_SUBREDDIT,\n        val: val\n    }\n}\n\nexport const submit = (val) => {\n    return  {\n        type: types.SUBMIT_SUBREDDIT,\n        val: val\n    }\n}\n\n","import React, { Component } from 'react';\nimport Header from './Containers/Header/Header';\nimport './App.css';\n\n\nclass App extends Component {\n\n  render () {\n    \n  return (\n\n      <div className=\"App\">\n       \n        <Header />\n        <footer></footer>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from '../src/Store/store';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}