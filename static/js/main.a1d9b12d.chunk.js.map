{"version":3,"sources":["Store/Reducers/display.js","Store/Actions/types.js","Store/Reducers/search.js","Store/store.js","Store/Actions/fetchSubs.js","Components/Search/Search.js","Containers/Main/Main.js","Components/Subreddits/Subreddits.js","Containers/Header/Header.js","Store/Actions/search.js","Store/Actions/display.js","Containers/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["initialState","comments","theme","reducer","state","arguments","length","undefined","action","type","newArray","map","comment","Object","objectSpread","searched","subreddits","editedSearch","val","includes","replace","some","subreddit","toUpperCase","alert","concat","toConsumableArray","rootReducer","combineReducers","src","searchReducer","dis","displayReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","apiUrl","getFrontPage","axios","get","then","res","data","children","catch","error","console","log","checkSubreddit","sub","fetchSubPosts","fetchPostComments","post","SearchField","handleSubmit","e","preventDefault","_this2","this","react_default","a","createElement","onSubmit","className","Search","onSearchChange","props","search","target","value","Button","onClick","clicked","Component","main","preview_image","post_title","post_preview","Image","style","display","post_link","title_styles","href","react_router_dom","postClicked","to","pathname","postTitle","image","text","post_text","author","subreddit_title_styles","subreddit_title","join","Icon","name","score","num_comments","Subreddits","subImage","icon_img","setState","Grid","Column","width","label","as","color","content","ribbon","Header","posts","isValid","handleClick","_this","handleSubClick","handleAllClick","handlePostClick","id","commentsArray","push","onClickPost","handleThemeSelect","onSelectTheme","headerTheme","mainTheme","subTheme","sub_title_styles","_this3","subs","Components_Subreddits_Subreddits","key","previewData","postLink","url","is_self","permalink","Main","subreddit_name_prefixed","title","selftext","toString","Fragment","Search_Search","onSearch","role","aria-expanded","tabIndex","aria-live","aria-atomic","aria-hidden","aria-checked","aria-selected","Container","centered","Row","connect","coms","dispatch","actions","Post","_this$props$location$","location","commentStyle","replyStyle","titleStyle","subtext_styles","com","replies","reply","body","reps","App","react_router","path","exact","component","render","Containers_Post_Post","assign","isAuthed","Boolean","hostname","match","ReactDOM","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1d9b12d.chunk.js","sourcesContent":["import * as actionTypes from '../Actions/types';\n\n\nconst initialState = {\n    comments: [],\n    theme: 'default'\n}\n\nconst reducer = ( state = initialState, action ) => {\n    if ( action.type ) {\n        switch( action.type ) {\n\n            case actionTypes.DISPLAY_POST_COMMENTS:\n\n                const newArray = action.comments.map(comment => {\n                    \n                    return comment\n                })\n    \n                return {\n                    ...state,\n                    comments: newArray\n                }\n\n                case actionTypes.DISPLAY_THEME:\n                \n                return {\n                    ...state,\n                    theme: action.theme\n                }\n            \n            default: \n                return state;\n        }\n    }\n}\n\n\nexport default reducer;\n\n","export const SEARCH_SUBREDDIT = 'SEARCH_SUBREDDIT';\nexport const SUBMIT_SUBREDDIT = 'SUBMIT_SUBREDDIT';\nexport const FETCH_SUBS_BEGIN = 'FETCH_SUBS_BEGIN';\nexport const FETCH_SUBS_SUCCESS = 'FETCH_SUBS_SUCCESS';\nexport const FETCH_SUBS_FAILURE = 'FETCH_SUBS_FAILURE';\nexport const DISPLAY_POSTS = 'DISPLAY_POSTS';\nexport const DISPLAY_POST_COMMENTS = 'DISPLAY_POST_COMMENTS';\nexport const DISPLAY_THEME = 'DISPLAY_THEME';","import * as actions from '../Actions/types';\n\nconst initialState = {\n    //all searched subreddits will be displayed below the search\n    searched: '',\n    subreddits: [],\n}\n\n const reducer = (state = initialState, action) => {\n    if (action.type) {\n        switch (action.type) {\n            case actions.SEARCH_SUBREDDIT:\n\n                let editedSearch\n                if (action.val.includes('r/')) {\n                    editedSearch = action.val.replace('r/', '')\n                } else {\n                    editedSearch = action.val;\n                }\n                \n                return {\n                    ...state,\n                    searched: editedSearch\n                }\n            \n            case actions.SUBMIT_SUBREDDIT: \n                const foundExistingSubreddit = state.subreddits.some(\n                    subreddit => subreddit.toUpperCase() === action.val.toUpperCase()\n                )\n\n                if (!foundExistingSubreddit) {\n                    return {\n                        ...state,\n                        subreddits: [...state.subreddits, action.val]\n                    }\n                } else {\n                    alert('Subreddit already chosen')\n                    return state\n                }\n                \n                \n                \n                \n              \n                    \n                \n            default:\n                return state;\n        }\n    }\n}\n\nexport default reducer\n\n\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport displayReducer from './Reducers/display';\nimport searchReducer from './Reducers/search';\n\nconst rootReducer = combineReducers({\n    src: searchReducer,\n    dis: displayReducer\n})\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n\nexport default store;","import axios from 'axios';\n\nconst apiUrl = 'https://www.reddit.com/';\n\n\n// get r/all\n\nexport const getFrontPage = () => { \n\n    return axios.get(apiUrl + 'r/all/top.json')\n        .then(res => {\n            return res.data.data.children //top 25 posts\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n\n//check if subreddit exists \n\nexport const checkSubreddit = (sub) => {\n   \n    return axios.get(apiUrl + 'r/' + sub + '/about.json')\n        .then(res => {\n            return true\n        })\n        .catch(error => {\n            console.log('Invalid Subreddit')\n            return false\n            \n        })\n}\n//fetch subreddit icon images\nexport const fetchSubImages = (sub) => {\n\n     return axios.get(apiUrl + 'r/' + sub + '/about.json')\n        .then(res => {\n            return res.data.data.icon_img\n        })\n        .catch(error => {\n            console.log(error);\n        })\n        \n\n}\n\n//fetch posts...\n\nexport const fetchSubPosts = (sub) => {\n    \n    return axios.get(apiUrl + 'r/' + sub + '/top.json')\n        .then(res => {\n             return res.data.data.children //top 25 posts\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n\n//fetch post comments...\n\nexport const fetchPostComments = (sub, post) => {\n    \n    return axios.get(apiUrl + 'r/' + sub +'/comments/' + post +'.json')\n        .then(res => {\n            return res.data[1].data.children //array of comment objects with \"kind\" string and \"data\" object\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n","import React, { Component } from 'react';\nimport { Search, Button } from 'semantic-ui-react';\n\n\nclass SearchField extends Component {\n\n\n    state = {}\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n   render() {\n\n   \n    return (\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n            <div className=\"search-area\">\n                <Search\n                    onSearchChange={(e) => this.props.search(e.target.value)} />\n                <Button onClick={this.props.clicked}>Add Subreddit</Button>\n            </div>\n        </form>\n    );\n   }\n }\n\n\n\n\nexport default SearchField;\n\n","import React from 'react';\nimport { Icon, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\n\n\nconst main = (props) => {\n\n    \n    \n    let preview_image, post_title;\n\n    if (props.post_preview !== 'self') {\n        preview_image = (<Image src={props.post_preview} />)\n    } else {\n        preview_image = (<Image style={{display: 'none'}} />)\n    }\n\n    if (props.post_link) {\n\n        post_title = (\n            \n            <h4 className={props.title_styles}>\n                <a href={props.post_link} target=\"blank\">\n                    {props.post_title}\n                 </a>\n            </h4>\n       \n        ); \n    } else {\n        post_title = (\n            <h4 className={props.title_styles}>\n                <Link onClick={props.postClicked}\n                    to={{\n                        pathname: '/post/',\n                        state: {\n                            postTitle: props.post_title,\n                            image: props.post_preview,\n                            text: props.post_text,\n                            author: props.author,\n                            comments: props.comments\n                        }\n                    }}>{props.post_title}</Link>\n            </h4>\n        );\n    }\n\n    \n    \n\n    return (\n   \n        <div className=\"post\">\n           \n\n            <h4 className={props.subreddit_title_styles}>{props.subreddit_title}</h4>\n           \n                {post_title}\n          \n                \n            {preview_image}\n            \n            <div className={[props.subreddit_title_styles, 'post-info'].join(' ')}>\n                <Icon name=\"arrow alternate circle up outline\" /><p className=\"score-num\">{props.score}</p><Icon name=\"arrow alternate circle down outline\" /> <p className=\"comment-num\">{props.num_comments}</p> <Icon name=\"comment outline\" /> <br/>\n                by {props.author} | 12 hours ago\n            </div>\n        </div>\n        \n    )\n};\n\n\nexport default main;","import React, { Component } from 'react';\nimport { Grid, Image } from 'semantic-ui-react';\nimport { fetchSubImages } from '../../Store/Actions/fetchSubs';\n\n\n\n\n\n\nclass Subreddits extends Component {\n\n    state = {\n        subImage: '',\n    }\n\n    componentDidMount() {\n        fetchSubImages(this.props.sub).then(image => {\n\n            if (image) {\n                this.setState({ subImage: image })\n            } else {\n                const redditImage = 'https://cdns.iconmonstr.com/wp-content/assets/preview/2016/240/iconmonstr-reddit-4.png';\n                this.setState({ subImage: redditImage})\n            }\n          \n                \n\n           \n        })\n    }\n   \n    \n    render() {\n             \n        return (\n         \n            \n        <Grid.Column onClick={this.props.clicked}width={2}>\n            <Image\n                label={{ as: 'a', color: 'blue', content: `${this.props.sub}`, ribbon: true }}\n                src={this.state.subImage}\n\n            />\n        </Grid.Column>\n                \n        );\n    }\n}\n\n\nexport default Subreddits;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Store/Actions';\nimport { Grid } from 'semantic-ui-react';\nimport SearchField from '../../Components/Search/Search';\nimport Main from '../Main/Main';\nimport Subreddits from '../../Components/Subreddits/Subreddits';\nimport { Container } from 'semantic-ui-react';\nimport { fetchSubPosts, checkSubreddit, fetchPostComments, getFrontPage } from '../../Store/Actions/fetchSubs';\n\nclass Header extends Component {\n\n    state = {\n        posts: [],\n        isValid: true,\n   \n    }\n\n    componentDidMount() {\n\n       getFrontPage().then(posts => {\n           this.setState({posts: posts})\n       })\n       \n    }\n    \n    \n    handleClick = (props) => {\n        \n        checkSubreddit(props).then(res => {\n            if (res === true) {\n                this.setState({isValid: true}, () => {\n                    this.props.onSubmit(props)\n                })\n            } else {\n                this.setState({isValid: false}, () => {\n                    alert('Invalid Subreddit')\n                })\n            }\n\n        })\n     \n        \n        \n    }\n\n    handleSubClick = (props) => {\n        fetchSubPosts(props).then(posts => {\n            this.setState({posts: posts});\n            \n        });\n\n       \n        \n    }\n\n    handleAllClick = () => {\n        getFrontPage().then(posts => {\n            this.setState({ posts: posts })\n        })\n    }\n\n    handlePostClick = (sub, id) => {\n        \n        const commentsArray = [];\n\n       fetchPostComments(sub, id).then(res => {\n           res.map(comment => {\n               commentsArray.push(comment.data);\n               return commentsArray         \n           })\n           this.props.onClickPost(commentsArray);\n       })\n\n    }\n\n    handleThemeSelect = (theme) => {\n        this.props.onSelectTheme(theme);\n    }\n\n\n\n    render () {\n\n        /* Change Theme */\n\n        let headerTheme, mainTheme, subTheme, post_title, sub_title_styles;\n\n        if (this.props.theme === 'default') {\n            headerTheme = 'header';\n            mainTheme = 'main-content';\n            subTheme = 'subreddit-selection';\n            post_title = 'post-title-default';\n            sub_title_styles = 'subreddit-title-default';\n\n        } else if (this.props.theme === 'night') {\n            headerTheme = 'nightHeader';\n            mainTheme = 'main-content-night';\n            subTheme = 'sub-theme-night';\n            post_title = 'post-title-night';\n            sub_title_styles = 'subreddit-title-night';\n        }\n\n      \n        let subreddits;  \n        \n        subreddits = this.props.subs.map(sub => {\n  \n            return (\n\n                <Subreddits\n                    clicked={() => this.handleSubClick(sub)}\n                    key={sub}\n                    sub={sub}\n                />\n                \n            )\n\n        })\n\n    \n\n      \n\n\n         const main = this.state.posts.map(post => {\n                    \n            let previewData, postLink;\n\n            if (post.data.url.includes('.jpg') || post.data.url.includes('.png')) {\n                previewData = post.data.url;\n                postLink = null\n            } else if (post.data.is_self) {\n                previewData = null;\n                postLink = null;\n            } else {\n                 postLink = `http://www.reddit.com${post.data.permalink}`;\n                 previewData = null;\n             } \n             \n            return (\n                <Main\n                    subreddit_title_styles={sub_title_styles}\n                    title_styles={post_title}\n                    postClicked={() => this.handlePostClick(post.data.subreddit, post.data.id)}\n                    key={post.data.id}\n                    subreddit_title={post.data.subreddit_name_prefixed}\n                    post_title={post.data.title}\n                    post_link={postLink}\n                    post_preview={previewData}\n                    post_text={post.data.selftext}\n                    num_comments={post.data.num_comments.toString()}\n                    score={post.data.score.toString()}\n                    author={post.data.author}\n                //Get time created and create a function that tells the user how long ago it was created\n                />    \n            )\n        })\n\n\n       \n       \n       \n\n        return (\n            <>\n\n            <div className={headerTheme}>\n                <h1 className=\"title\">France Is Bacon</h1>\n                <SearchField \n                    search={this.props.onSearch}\n                    clicked={() => this.handleClick(this.props.src)} /> \n                <div className=\"ui compact menu\">\n                    <div role=\"listbox\" aria-expanded=\"false\" className=\"ui item simple dropdown\" tabIndex=\"0\">\n                        <div className=\"text\" role=\"alert\" aria-live=\"polite\" aria-atomic=\"true\">Change Theme</div>\n                        <i aria-hidden=\"true\" className=\"dropdown icon\"></i>\n                        <div className=\"menu transition\">\n                            <div\n                                aria-checked=\"false\"\n                                aria-selected=\"true\"\n                                className=\"selected item\"\n                                onClick={() => this.handleThemeSelect('default')}\n                            >\n                                <span className=\"text\">Default Theme</span>\n                            </div>\n                            <div\n                                aria-checked=\"false\"\n                                aria-selected=\"false\"\n                                className=\"item\"\n                                onClick={() => this.handleThemeSelect('night')}\n                            >\n                                <span className=\"text\">Night Theme</span>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <Container>\n            \n                <Grid className={subTheme} centered>\n                    <Grid.Row>\n                        <Subreddits\n                            clicked={() => this.handleAllClick()}\n                            sub='all'\n                        />\n                        {subreddits}\n                    </Grid.Row>\n                </Grid>\n\n                <div className={mainTheme}>\n                        {main}\n                </div>\n           </Container>\n           </>\n          \n        ); \n    }\n\n}\n\n\nconst mapStateToProps = state => {\n\n    return {\n        src: state.src.searched,\n        subs: state.src.subreddits,\n        coms: state.dis.comments ,\n        theme: state.dis.theme\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearch: (e) => dispatch(actions.search(e)),\n        onSubmit: (value) => dispatch(actions.submit(value)),\n        onClickPost: (comments) => dispatch(actions.displayPostComments(comments)),\n        onSelectTheme: (theme) => dispatch(actions.displayTheme(theme))\n        \n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import * as types from './types';\n\n\n\nexport const search = (val) => {\n    return {\n        type: types.SEARCH_SUBREDDIT,\n        val: val\n    }\n}\n\nexport const submit = (val) => {\n   \n    return {\n        type: types.SUBMIT_SUBREDDIT,\n        val: val\n    }\n   \n    \n}\n\n","import * as types from './types';\n\n\nexport const displayPostComments = comments => {\n    return {\n        type: types.DISPLAY_POST_COMMENTS,\n        comments: comments\n    }\n}\n\n\nexport const displayTheme = theme => {\n    return {\n        type: types.DISPLAY_THEME,\n        theme: theme\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react'\nimport { connect } from 'react-redux';\n\n\nclass Post extends Component {\n    state = {\n        postTitle: '',\n        image: '',\n        text: '',\n        comments: [],\n        author: '',\n    }\n\n    componentDidMount() {\n        //const { header } = this.props.match.params\n        const { postTitle, image, text, comments, author } = this.props.location.state\n        this.setState({\n            postTitle: postTitle,\n            image: image,\n            text: text,\n            comments: comments,\n            author: author\n        })\n        \n    }\n\n\n\n    render() {\n\n        let commentStyle, replyStyle, titleStyle, subtext_styles;\n\n        if (this.props.theme === 'default') {\n            commentStyle = 'comments';\n            replyStyle = 'reply';\n            titleStyle = 'post-title-default';\n            subtext_styles = 'subtext';\n        } else if (this.props.theme === 'night'){\n            commentStyle = 'comments-night';\n            replyStyle = 'replies-night';\n            titleStyle = 'post-title-night';\n            subtext_styles = 'subtext-night';\n        }\n        \n        const comments = this.props.coms.map(com => {\n            let replies;\n            if (com.replies) {\n                 replies = com.replies.data.children.map(reply => {\n                    \n                    return (\n                        <div key={reply.data.id} className={replyStyle}>\n                            <p>{reply.data.author}</p>\n                            <h4>{reply.data.body}</h4>\n                        </div>\n                    );   \n                    \n                })\n                \n            }\n\n           return (\n               <>\n               <div className={commentStyle} key={com.id}>\n                    <p>{com.author}</p>\n                    <h4>{com.body}</h4>\n                   \n               </div>\n               { replies }\n               <hr />\n               </>\n            )\n        })\n       \n\n\n        return(\n            <div className=\"single-post\">\n                <Link to=\"/\"><Button>Go Back</Button></Link>\n                <div className=\"single-post-header\">\n                    <h1 className={titleStyle}>{this.state.postTitle}</h1>\n                    <Image src={this.state.image} />\n                    <p className={subtext_styles}>{this.state.text}</p>\n                    <p className={subtext_styles}>by: {this.state.author}</p>\n                </div>\n                <div className=\"comments\">\n                    {comments}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n\n    return {\n        coms: state.dis.comments,\n        reps: state.dis.reps,\n        theme: state.dis.theme\n    }\n}\n\n\nexport default connect(mapStateToProps)(Post);;","import React, { Component } from 'react';\nimport Header from './Containers/Header/Header';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route }  from 'react-router-dom'\nimport { Container } from 'semantic-ui-react';\nimport Post from './Containers/Post/Post';\nimport './App.css';\n\n\nclass App extends Component {\n\n  render () {\n\n    let body;\n\n    if (this.props.theme === 'default') {\n      body = 'App';\n    } else if (this.props.theme === 'night') {\n      body = 'App-Night';\n    }\n    \n    \n  return (\n\n      <div className={body}>\n       \n          <Router>\n              <Route path=\"/\" exact component={Header} />\n              <Route path=\"/france-is-bacon/\" exact component={Header} />\n              <Container>\n                <Route \n                  path=\"/post/\" \n                  render={(props) => <Post {...props} isAuthed={true}/>} />\n             </Container>\n              </Router>\n          \n        \n      </div>\n    );\n\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    theme: state.dis.theme\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from '../src/Store/store';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}