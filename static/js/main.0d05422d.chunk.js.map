{"version":3,"sources":["Store/Reducers/display.js","Store/Actions/types.js","Store/Reducers/search.js","Store/store.js","Components/Search/Search.js","Components/Subreddits/Subreddits.js","Containers/Header/Header.js","Store/Actions/search.js","Containers/Main/Main.js","App.js","serviceWorker.js","index.js","images/askreddit.png"],"names":["initialState","results","reducer","state","arguments","length","undefined","action","type","searched","rootReducer","combineReducers","src","searchReducer","dis","displayReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","searchField","props","react_default","a","createElement","onSubmit","e","_this","handleSubmit","className","Search","onSearchChange","search","Button","Subreddits","Grid","centered","Row","Column","width","Image","label","as","color","content","ribbon","askRedditPic","Component","header","Fragment","Search_Search","this","onSearch","Components_Subreddits_Subreddits","connect","dispatch","main","Icon","name","App","Header","Main","Boolean","location","hostname","match","__webpack_require__","d","__webpack_exports__","src_getImage","getImage","sub","axios","get","then","res","console","log","data","icon_img","catch","error","ReactDOM","render","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","p"],"mappings":"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","file":"static/js/main.0d05422d.chunk.js","sourcesContent":["import * as actionTypes from '../Actions/types';\n\n\nconst initialState = {\n    results: [],\n}\n\nconst reducer = ( state = initialState, action ) => {\n    if ( action.type ) {\n        switch( action.type ) {\n            case actionTypes.DISPLAY_POSTS:\n                return state\n            \n            default: \n                return state;\n        }\n    }\n}\n\n\nexport default reducer;","export const SEARCH_SUBREDDIT = 'SEARCH_SUBREDDIT';\nexport const DISPLAY_POSTS = 'DISPLAY_POSTS';","import * as actionTypes from '../Actions/types';\n\n\nconst initialState = {\n    //all searched subreddits will be displayed below the search form.\n    searched: [],\n}\n\nconst reducer = (state = initialState, action) => {\n    if (action.type) {\n        switch (action.type) {\n            case actionTypes.SEARCH_SUBREDDIT:\n                return state\n\n            default:\n                return state;\n        }\n    }\n}\n\n\nexport default reducer","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport displayReducer from './Reducers/display';\nimport searchReducer from './Reducers/search';\n\nconst rootReducer = combineReducers({\n    src: searchReducer,\n    dis: displayReducer\n})\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n\nexport default store;","import React from 'react';\nimport { Search, Button } from 'semantic-ui-react';\n\n\nconst searchField= (props) => {\n\n   \n    return (\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n            <div className=\"search-area\">\n                <Search\n                    onSearchChange={props.search} />\n                <Button type=\"submit\">Add Subreddit</Button>\n            </div>\n        </form>\n    );\n }\n\n\n\n\nexport default searchField;\n\n","import React, { Component } from 'react';\nimport { Grid, Image } from 'semantic-ui-react';\n//const axios = require('axios');\nimport askRedditPic from '../../images/askreddit.png';\n\n\nclass Subreddits extends Component {\n\n    render() {\n        /*\n        \n        axios.get('https://www.reddit.com/r/AskReddit/about.json')\n            .then(res => {\n                console.log(res.data.data.icon_img)\n                this.setState({ askImage: res.data.data.icon_img });\n            })\n            .catch(error => {\n                console.log(error);\n            })\n\n            */\n        \n        return (\n            <Grid className=\"subreddit-selection\" centered>\n                <Grid.Row>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'blue', content: 'AskReddit', ribbon: true }}\n                            src={askRedditPic}\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'red', content: 'Braves', ribbon: true }}\n                            src={askRedditPic}\n                          \n\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'yellow', content: 'JavaScript', ribbon: true }}\n                            src={askRedditPic}\n                           \n\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'green', content: 'ExJw', ribbon: true }}\n                            src={askRedditPic}\n\n\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'black', content: 'Science', ribbon: true }}\n                            src={askRedditPic}\n\n\n                        />\n                    </Grid.Column>\n                    \n                    \n                </Grid.Row>\n\n            </Grid>\n        );\n    }\n}\n\n\nexport default Subreddits;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Store/Actions';\nimport SearchField from '../../Components/Search/Search';\nimport Subreddits from '../../Components/Subreddits/Subreddits';\n\n\nclass header extends Component {\n\n    render () {\n\n       \n         \n        return (\n            <>\n            <div className=\"header\">\n                <h1 className=\"title\">France Is Bacon</h1>\n                <SearchField search={this.props.onSearch} /> \n            </div>\n                <Subreddits />\n           \n           </>\n          \n        ); \n    }\n\n}\n\n\nconst mapStateToProps = state => {\n\n    return {\n        src: state.src.searched,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearch: () => dispatch(actions.search()),\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(header);","import * as types from './types';\n\n\nexport const search = () => {\n    return {\n        type: types.SEARCH_SUBREDDIT\n    }\n}","import React from 'react';\nimport { Icon } from 'semantic-ui-react'\n\n\nconst main = () => (\n\n\n    <div className=\"main-content\">\n\n        <div className=\"sub-title\">\n            <h4>r/funny</h4>\n        </div>\n\n        <div className=\"posts\">\n\n            <div className=\"post\">\n\n                <h4 className=\"post-title\">\n                    WTF Wednesday\n                </h4>\n            </div>\n            <div className=\"post-info\">\n                4 <Icon name=\"arrow alternate circle up outline\" /> 1 <Icon name=\"arrow alternate circle down outline\" /> 5 <Icon name=\"comment outline\" /> <br/>\n                by AutoModerator 12 hours ago\n            </div>\n\n        </div>\n\n    </div>\n\n);\n\n\nexport default main;","import React, { Component } from 'react';\nimport Header from './Containers/Header/Header';\nimport Main from './Containers/Main/Main';\nimport './App.css';\n\n\nclass App extends Component {\n\n  render () {\n    \n  return (\n\n      <div className=\"App\">\n       \n        <Header />\n        <Main />\n        <footer></footer>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from '../src/Store/store';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\nconst apiUrl = 'https://www.reddit.com/';\n\nexport const getImage = sub => {\n    axios.get(apiUrl + sub + '/about.json')\n        .then(res => {\n            console.log(res.data.data.icon_img)\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/askreddit.7d937619.png\";"],"sourceRoot":""}