{"version":3,"sources":["Store/Reducers/search.js","Store/store.js","Store/Actions/fetchSubs.js","Store/Actions/types.js","Components/Search/Search.js","Components/Subreddits/Subreddits.js","Containers/Header/Header.js","Store/Actions/search.js","Containers/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["initialState","searched","subreddits","subImages","rootReducer","combineReducers","src","sub","state","arguments","length","undefined","action","type","Object","objectSpread","val","concat","console","log","axios","get","apiUrl","then","res","data","icon_img","image","catch","error","dis","displayReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","SearchField","handleSubmit","e","preventDefault","_this2","this","react_default","a","createElement","onSubmit","className","Search","onSearchChange","props","search","target","value","Button","onClick","clicked","Component","Subreddits","Grid","centered","Row","Column","width","Image","label","as","color","content","ribbon","Header","subImage","subreddit","subs","Fragment","Search_Search","onSearch","Components_Subreddits_Subreddits","connect","dispatch","main","Icon","name","App","Containers_Header_Header","Main","Boolean","location","hostname","match","ReactDOM","render","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86b7eb20.chunk.js","sourcesContent":["import * as actions from '../Actions/types';\nimport { fetchSubImages } from '../Actions/fetchSubs';\n\n\nconst initialState = {\n    //all searched subreddits will be displayed below the search\n    searched: '',\n    subreddits: [],\n    subImages: [],\n}\n\nexport const reducer = (state = initialState, action) => {\n    if (action.type) {\n        switch (action.type) {\n            case actions.SEARCH_SUBREDDIT:\n                return {\n                    ...state,\n                    searched: action.val\n                }\n            \n            case actions.SUBMIT_SUBREDDIT: \n                return {\n                    ...state,\n                    subreddits: state.subreddits.concat(action.val),\n                    subImages: state.subImages.concat(fetchSubImages(action.val)),\n                }\n                \n            default:\n                return state;\n        }\n    }\n}\n\n\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport displayReducer from './Reducers/display';\nimport { reducer } from './Reducers/search';\n\nconst rootReducer = combineReducers({\n    src: reducer,\n    dis: displayReducer\n})\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n\nexport default store;","import axios from 'axios';\n\n\n//fetch subreddit icon images\nexport const fetchSubImages = (sub) => {\n    const apiUrl = 'https://www.reddit.com/';\n    \n\n    console.log(sub)\n\n     axios.get(apiUrl + 'r/' + sub + '/about.json')\n        .then(res => {\n            return res.data.data.icon_img\n        })\n        .then(image => {\n            console.log(image)\n        })\n        .catch(error => console.log(error))\n\n}\n\n/*\n    if (sub.length > 0) {\n       image =  axios.get(apiUrl + 'r/' + sub + '/about.json')\n            .then(res => console.log(res.data.data.icon_img))\n            .catch(error => console.log(error)\n        \n    }\n    \n    return image;*/\n\n\n\n\n\n\n//fetch posts...\n\n\n\n\n\n//maybe more stuff later\n\n","export const SEARCH_SUBREDDIT = 'SEARCH_SUBREDDIT';\nexport const SUBMIT_SUBREDDIT = 'SUBMIT_SUBREDDIT';\nexport const FETCH_SUBS_BEGIN = 'FETCH_SUBS_BEGIN';\nexport const FETCH_SUBS_SUCCESS = 'FETCH_SUBS_SUCCESS';\nexport const FETCH_SUBS_FAILURE = 'FETCH_SUBS_FAILURE';\nexport const DISPLAY_POSTS = 'DISPLAY_POSTS';","import React, { Component } from 'react';\nimport { Search, Button } from 'semantic-ui-react';\n\n\nclass SearchField extends Component {\n\n\n    state = {}\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n   render() {\n\n   \n    return (\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n            <div className=\"search-area\">\n                <Search\n                    onSearchChange={(e) => this.props.search(e.target.value)} />\n                <Button onClick={this.props.clicked}>Add Subreddit</Button>\n            </div>\n        </form>\n    );\n   }\n }\n\n\n\n\nexport default SearchField;\n\n","import React, { Component } from 'react';\nimport { Grid, Image } from 'semantic-ui-react';\n//const axios = require('axios');\n\n\n\nclass Subreddits extends Component {\n\n    render() {\n        /*\n        \n        axios.get('https://www.reddit.com/r/AskReddit/about.json')\n            .then(res => {\n                console.log(res.data.data.icon_img)\n                this.setState({ askImage: res.data.data.icon_img });\n            })\n            .catch(error => {\n                console.log(error);\n            })\n\n            */\n            \n        return (\n            <Grid className=\"subreddit-selection\" centered>\n                <Grid.Row>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'blue', content: 'AskReddit', ribbon: true }}\n                            src={'https://b.thumbs.redditmedia.com/EndDxMGB-FTZ2MGtjepQ06cQEkZw_YQAsOUudpb9nSQ.png'}\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'red', content: 'Braves', ribbon: true }}\n                            src={'https://b.thumbs.redditmedia.com/kMuTetju1XREpLsWsNsfyUPiA1N6WFAzauak575dIrM.png'}\n                          \n\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'yellow', content: 'JavaScript', ribbon: true }}\n                            src={'https://a.thumbs.redditmedia.com/zDOFJTXd6fmlD58VDGypiV94Leflz11woxmgbGY6p_4.png'}\n                           \n\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'green', content: 'ExJw', ribbon: true }}\n                            src={'https://b.thumbs.redditmedia.com/3C8w0x5TOPdkD9uEFWTCAN6g6mGB6WXm3Gw4T4DDsAs.png'}\n\n\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={2}>\n                        <Image\n                            label={{ as: 'a', color: 'black', content: 'FreeFolk', ribbon: true }}\n                            src={'https://b.thumbs.redditmedia.com/9xyq1XmYTr6-QDGGX-lcr5RpLNMmXR2c-RgiyNbJHGk.png'}\n\n\n                        />\n                    </Grid.Column>\n                    \n                    \n                </Grid.Row>\n\n            </Grid>\n        );\n    }\n}\n\n\nexport default Subreddits;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Store/Actions';\nimport SearchField from '../../Components/Search/Search';\nimport Subreddits from '../../Components/Subreddits/Subreddits';\nimport axios from 'axios';\n\n\nclass Header extends Component {\n\n    state = {\n        subImage: '',\n    }\n\n    componentDidMount() {\n        //const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        const apiUrl = 'https://www.reddit.com/';\n        const subreddit = this.props.subs\n        \n        console.log(subreddit)\n        \n        if (subreddit.length > 0) {\n            axios.get(apiUrl + 'r/' + subreddit + '/about.json')\n                .then(res => console.log(res.data.data.icon_img))\n                .catch(error => console.log(error))\n            \n           \n        }\n        \n        \n        \n       \n    }\n\n    \n\n    render () {\n       \n       \n        return (\n            <>\n\n            <div className=\"header\">\n                <h1 className=\"title\">France Is Bacon</h1>\n                <SearchField \n                    search={this.props.onSearch}\n                    clicked={() => this.props.onSubmit(this.props.src)} /> \n            </div>\n                <Subreddits subs={this.props.subs}\n                            image={this.state.subImage}\n                            \n                             />\n           \n           </>\n          \n        ); \n    }\n\n}\n\n\nconst mapStateToProps = state => {\n\n    return {\n        src: state.src.searched,\n        subs: state.src.subreddits\n        \n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearch: (e) => dispatch(actions.search(e)),\n        onSubmit: (value) => dispatch(actions.submit(value))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import * as types from './types';\n\n\nexport const search = (val) => {\n    return {\n        type: types.SEARCH_SUBREDDIT,\n        val: val\n    }\n}\n\nexport const submit = (val) => {\n    return  {\n        type: types.SUBMIT_SUBREDDIT,\n        val: val\n    }\n}\n\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react'\n\n\nconst main = () => (\n\n\n    <div className=\"main-content\">\n\n        <div className=\"sub-title\">\n            <h4>r/funny</h4>\n        </div>\n\n        <div className=\"posts\">\n\n            <div className=\"post\">\n\n                <h4 className=\"post-title\">\n                    WTF Wednesday\n                </h4>\n            </div>\n            <div className=\"post-info\">\n                4 <Icon name=\"arrow alternate circle up outline\" /> 1 <Icon name=\"arrow alternate circle down outline\" /> 5 <Icon name=\"comment outline\" /> <br/>\n                by AutoModerator 12 hours ago\n            </div>\n\n        </div>\n\n    </div>\n\n);\n\n\nexport default main;","import React, { Component } from 'react';\nimport Header from './Containers/Header/Header';\nimport Main from './Containers/Main/Main';\nimport './App.css';\n\n\nclass App extends Component {\n\n  render () {\n    \n  return (\n\n      <div className=\"App\">\n       \n        <Header />\n        <Main />\n        <footer></footer>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from '../src/Store/store';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}